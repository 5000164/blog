<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2017 on 5000164 is here</title><link>https://blog.5000164.jp/2017/</link><description>Recent content in 2017 on 5000164 is here</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sun, 31 Dec 2017 17:57:13 +0900</lastBuildDate><atom:link href="https://blog.5000164.jp/2017/feed.xml" rel="self" type="application/rss+xml"/><item><title>2017 年に取り入れてよかったもの</title><link>https://blog.5000164.jp/2017/12/31/adopt-2017/</link><pubDate>Sun, 31 Dec 2017 17:57:13 +0900</pubDate><guid>https://blog.5000164.jp/2017/12/31/adopt-2017/</guid><description>人生をよりよいものにするために 2017 年もいろいろなものを取り入れた。 その中でもよかったと思うものを振り返る。 前提 2017 年に新しく導入したもののみを取り上げる 導入してよかったと感じているのは 28 歳 男性 プログラマー 学習編 ポモドーロテクニック 2017 年に導入して 1 番よかったものはこれ。 今まで存在とやり方は知っていたが、自分には合わないだろうという偏見で 1 度も試したことがなかった。 リモートワークを行うようになったこと、勉強のタスクをうまく区切れなくて手をつけるのに億劫になってしまっていたことを解消するために導入した。 導入して 1 番よかったことは、今までの「このタスクをやるのに何分」という考え方から「25 分でここまでできる」という考え方に変わったこと。 目標の設定もしやすいし、振り返りもできるし、達成感も得られるし、非常におすすめ。 KPT による振り返り 改善を進めていくために振り返りを導入した。 その振り返り手法として KPT を使っ</description></item><item><title>教養としてのScala ~ そろそろ始めてみたい2017冬 に参加した</title><link>https://blog.5000164.jp/2017/12/31/scala-study-group/</link><pubDate>Sun, 31 Dec 2017 17:17:03 +0900</pubDate><guid>https://blog.5000164.jp/2017/12/31/scala-study-group/</guid><description>Scala の勉強会 詳細 【再増席】教養としてのScala ~ そろそろ始めてみたい2017冬 - connpass スライド 【再増席】教養としてのScala ~ そろそろ始めてみたい2017冬 - Media List - connpass 関連ブログ 教養としてのScala勉強会に参加しました - たけぞう瀕死ブログ 各発表のメモ 頑張りすぎないScala 楽しんでスカラやる 無理しなくていい でもやるからには関数型プログラミングを積極的に取り入れていくべき 手続き型のオブジェクト指向プログラミングから関数型プログラミングが地続きになっているのが Scala の特徴 次回教養としてのモナド 気になる 今日から始めるスカライフ~MajiでKoiする5秒前~ 参考になる資料 Introduction · Scala研修テキスト S-99: Ninety-Nine Scala Problems Scalaスケーラブルプログラミング第3版 | Martin Odersky, Lex Spoon, Bill Venners, 長尾 高弘, 羽生田 栄一, 水島 宏太 | 工学 | Kindleストア | Amazon Scalaメモ(Hishidama&amp;rsquo;s Scala Memo) List クラスを再実装すると勉強になる</description></item><item><title>青山エンジニア勉強交流会～Scala勉強会～に参加した</title><link>https://blog.5000164.jp/2017/12/14/scala-study-group/</link><pubDate>Thu, 14 Dec 2017 20:27:37 +0900</pubDate><guid>https://blog.5000164.jp/2017/12/14/scala-study-group/</guid><description>Scala の勉強会 詳細はこれ。 青山エンジニア勉強交流会～Scala勉強会～｜IT勉強会・セミナーなどのイベント情報検索サービス - TECH PLAY［テックプレイ］ スライドはこれ。 イベントレポート｜青山エンジニア勉強交流会～Scala勉強会～ - TECH PLAY［テックプレイ］ イベントレポートはこれ。 大盛況！ミニScalaまつり＠青山 | F@N Communications&amp;rsquo; Blog 各発表のメモ PHPエンジニアが始めるScala 型エイリアス 知らなかった便利そう Either って アイザー って読むの？ 調べたら イーザー でも アイザー でもいいらしい for yield わからない flatMap わからない &amp;ldquo;cats&amp;rdquo; in practice. 関数型ライブラリcatsの紹介と アドテクシステムにおける使用例 モナドわからない 圏論もわからない for yield わからない cats 使ってみたい Try 型わからない ScalaのDIパターンについて Cake Pattern 初めてふわっと理解できたかも でもやばい今もう忘れてる テスト書く時それぞれでどうなるのか知りたい Futureのおまじないを理解する Future わ</description></item><item><title>Scala で Slack bot</title><link>https://blog.5000164.jp/2017/11/29/slack-bot/</link><pubDate>Wed, 29 Nov 2017 13:53:55 +0900</pubDate><guid>https://blog.5000164.jp/2017/11/29/slack-bot/</guid><description>動機 Scala の勉強をするにあたって題材をどうしようか考えた。 Twitter のことを最近いいなと感じ始めていたのだけれど投稿するのが面倒くさくて、簡単に投稿できるようにしたかったので普段よく使っている Slack から投稿できるようにすることにした。 概要 Slack の bot に投げた内容をツイートする。 コード ここです。 5000164/scala-bot 技術的なところ Scala のライブラリと Java のライブラリ build.sbt で slack-scala-client は追加できるのに twitter4j-core は追加できないと悩んでいたら、 % と %% が違うことを知った。 groupID % artifactID % revision のかわりに、 groupID %% artifactID % revision を使うと（違いは groupID の後ろの二つ連なった %%）、 sbt はプロジェクトの Scala のバイナリバージョンをアーティファクト名に追加する。 これはただの略記法なので %% 無しで書くこともできる: sbt Reference Manual — ライブラリ依存性 slack-scala-client は Scala のライブラリなので略記法でいける、 twitter4j-core は Java のライブラリなので略記法ではいけない、ということだった。 モックを使ったテスト コントローラーのテストを書く時に、副作用が出る部分をモッ</description></item><item><title>高速化のために Hugo で CSS を HTML に埋め込む</title><link>https://blog.5000164.jp/2017/11/20/speed/</link><pubDate>Mon, 20 Nov 2017 13:26:39 +0900</pubDate><guid>https://blog.5000164.jp/2017/11/20/speed/</guid><description>速い is 正義 CSS は HTML に埋め込んだ方が速いらしい。 では Hugo でどうやってそれを実現するのか。 partial を使えばできそうだと思ってぐぐったらあった。 [Feature request] Partial CSS files · Issue #3186 · gohugoio/hugo これに従って下記のように修正する。 1 &amp;lt;style type=&amp;#34;text/css&amp;#34;&amp;gt;{{ partial &amp;#34;css/main.css&amp;#34; . | print | safeCSS }}{{ partial &amp;#34;css/monokai.css&amp;#34; . | print | safeCSS }}&amp;lt;/style&amp;gt; これでできた。 コードはここ。 高速化のために Web フォントをやめて CSS を HTML への埋め込みにした · 5000164/remember@0f3132d Minify はまだできてない 簡単にやる方法あるのかな。 2018.1.20 追記 CSS の Minify は YUI Compressor と WebStorm の File Watcher を使って実現した。 Minifying CSS - Help | WebStorm 2018.8.18 追記 Hugo が minify に対応した。 Output Minification, Live-Reload Fixes and More | Hugo</description></item><item><title>開いているページのはてなブックマークのコメントページに移動するブックマークレット</title><link>https://blog.5000164.jp/2017/11/17/hatebu/</link><pubDate>Fri, 17 Nov 2017 13:13:43 +0900</pubDate><guid>https://blog.5000164.jp/2017/11/17/hatebu/</guid><description>コード 1 javascript:(function(){location=(&amp;#39;http://b.hatena.ne.jp/entry/&amp;#39;+(location.protocol==&amp;#39;https:&amp;#39;?&amp;#39;s/&amp;#39;:&amp;#39;&amp;#39;)+location.host+location.pathname+location.search)}()); 背景 はてなブックマークの人気エントリーを RSS で購読しているが、なんでこれが人気エントリーになっているんだろう？と思う時がある。 その時に毎回はてなブックマークを検索して、そこからさらに URL を入力して、とやっていたが、それが手間だったのでブックマークレットで遷移できるようにした。 参考 エントリーページの URL 変更について - はてなブックマーク日記 - 機能変更、お知らせなど</description></item><item><title>その判断は合理的か？ - 本「不合理　誰もがまぬがれない思考の罠100」の感想</title><link>https://blog.5000164.jp/2017/11/14/irrationality/</link><pubDate>Tue, 14 Nov 2017 20:55:51 +0900</pubDate><guid>https://blog.5000164.jp/2017/11/14/irrationality/</guid><description>人間は合理的な判断を下せない 人間はさまざまな認知バイアスがかかり、合理的な判断を下すことができない。 この本では、簡単に認識が歪んでしまうことをさまざまな事実と実験から教えてくれる。 そして、合理的な判断を下せない理由と対策を示してくれる。 知る価値がある 認知バイアスの存在は知っていたし、気をつけていたつもりだったが、想像以上に影響が大きいものだと知った。 物事に対する認識が変わるほど非常に価値がある本。 どこかのタイミングでもう一度読むと思う。</description></item><item><title>プロフィールを GitHub にあげたらよかった</title><link>https://blog.5000164.jp/2017/11/13/profile/</link><pubDate>Mon, 13 Nov 2017 10:24:04 +0900</pubDate><guid>https://blog.5000164.jp/2017/11/13/profile/</guid><description>実際に作成したプロフィールはこちら。 5000164/profile GitHub に公開するためにいろいろ情報を整理できた 今まで職務経歴書はテンプレートを埋めるだけという感じだったが、 GitHub で公開するにあたって情報をどのように見せればいいかと考えることでいろいろと整理することができてためになった。 特に文章をたくさん追加したことがこれまでとの大きな違いになる。 項目があってそれに答えるだけではなく、自分の価値をどうやって伝えればいいのかを考えた結果文章を追加する形になった。 そしてなによりも公開することで誰の目に触れるかわからないのでビビって推敲を重ねることができた。 転職活動をするにあたって職務経歴書を書いていた 職務経歴書をどうやって管理しようかなと考えていた時に、職務経歴書を GitHub にあげるという記事を見てなるほど便利だと思ったのでやってみた。 これを機に職務経歴書の書き方とかも整理できてよかった。 これから編集していくのも楽しそう 考えが変わった時</description></item><item><title>Google 検索で日本語で検索するブックマークレット</title><link>https://blog.5000164.jp/2017/11/2/search/</link><pubDate>Thu, 02 Nov 2017 13:05:43 +0900</pubDate><guid>https://blog.5000164.jp/2017/11/2/search/</guid><description>2018.4.18 追記 元から下記の方法を使ったやり方が便利だった。 いもすさんのツイート: &amp;ldquo;Google Chromeの検索エンジン設定で、e を ?q=%s&amp;amp;lr=lang_en&amp;amp;hl=ja に、j を ?q=%s&amp;amp;lr=lang_ja&amp;amp;hl=ja に、デフォルトを ?q=%s&amp;amp;lr=lang_ja|lang_en&amp;amp;hl=ja にすると能動的に検索する言語が選べて便利（定期）… https://t.co/8p9hdK3V9f&amp;rdquo; コード 1 javascript:(function(){location=(location.href+&amp;#39;&amp;amp;hl=ja&amp;#39;)}()); 背景 Google 検索の設定を英語にしているが、まだ読めないことがたくさんあるので日本語で検索したくなる。 URL に hl=ja というパラメーターをつけることで言語設定を日本語にして検索することができるのでそれを簡略するためにブックマークレットを使う。</description></item><item><title>Mistel Barocco の設定備忘録</title><link>https://blog.5000164.jp/2017/10/31/keyboard/</link><pubDate>Tue, 31 Oct 2017 23:19:11 +0900</pubDate><guid>https://blog.5000164.jp/2017/10/31/keyboard/</guid><description>設定 Mac Modifier Keys Caps Lock: Control Conrtol: Control Option: Command Command: Option Mistel Barocco マクロ設定 Left Control: Fn Left Command: Right Command Right Command: Left Command Backspace: \ \: Backspace Fn + \: Delete Esc: ` Fn + Esc: Esc Fn + H: Move Left Fn + J: Move Down Fn + K: Move Up Fn + I: Home</description></item><item><title>Rust入門者向けハンズオンに参加した</title><link>https://blog.5000164.jp/2017/10/14/rust/</link><pubDate>Sat, 14 Oct 2017 22:10:57 +0900</pubDate><guid>https://blog.5000164.jp/2017/10/14/rust/</guid><description>Rust入門者向けハンズオンに参加した Rust入門者向けハンズオン #4 - connpass Rust に興味はあったけど触ったことなかったからよさそうと思って参加した。 触れてよかった。 これからも機会があれば触りたい。 言語に抱いたイメージ 現実的な言語だと思った。 ちゃんと実戦で使えるもの、という現実解としてこの形になったという感じ。 人間は信用できない、安全側に倒している、というのもよい。 メモリー周りの問題を解決することに興味が向いていると思うと納得するところもある。 関数型言語に影響を強く受けているということで触りやすかった。 基本的にイミュータブルとか。 でも参照とかを意識的にたくさん書いてる気配があるあたり、厳密にイミュータブルにするんじゃなくて処理の高速化のためとのバランスを取っている感じ。 結論 現時点でメインで触ることはない。 でも次ツールを書こうと思ったら Go じゃなくて Rust を選択すると思う。</description></item><item><title>デスクの向きを窓に向けたら気持ちがいい</title><link>https://blog.5000164.jp/2017/9/24/layout/</link><pubDate>Sun, 24 Sep 2017 20:53:36 +0900</pubDate><guid>https://blog.5000164.jp/2017/9/24/layout/</guid><description>デスクの向きを窓に向けたら気持ちよかった 今までデスクは壁にしか向けたことがなかった。 何回か部屋の内側に向けるレイアウトを考えたことはあったけど、やっぱりなんかしっくりこない気がしてやめていた。 でも今回やるだけやってみて嫌だったらまた直そうと思ってやってみた。 そしたらとてもよかった。 外の景色とかが見れて気持ちがいい。 おすすめ。 デスクを窓に向けた様子</description></item><item><title>ケーブルをまとめるために買ったチューブが便利</title><link>https://blog.5000164.jp/2017/9/10/cable/</link><pubDate>Sun, 10 Sep 2017 23:10:48 +0900</pubDate><guid>https://blog.5000164.jp/2017/9/10/cable/</guid><description>ケーブルをまとめるチューブが便利 ケーブルをまとめるチューブを買った。 ケーブルをまとめられて便利。 Amazon | ELECOM ゴチャゴチャなケーブルを整理するチューブ 内径20mm 長さ5.0m ブラック BST-20BK | ELECOM(エレコム) | パソコン・周辺機器 通販</description></item><item><title>AWS Lambda の Python 3.6 で LINE Bot を動かす</title><link>https://blog.5000164.jp/2017/8/14/line-bot/</link><pubDate>Mon, 14 Aug 2017 23:04:38 +0900</pubDate><guid>https://blog.5000164.jp/2017/8/14/line-bot/</guid><description>目的 LINE Bot を使って生活を少し便利にしたい。 背景 最近 LINE をよく使ってるから。 なんかちょっとしたメモとか簡単に確認したいなーと思ったから。 たまたま AWS Lambda の料金を調べたら思っていたよりも安かったので使ってみたくなったから。 この記事のスタートとゴール スタートは、 LINE をすでに使っているが、 API などは使ったことがないところ。 ゴールは、 LINE のグループチャットで特定の発言をしたら特定の内容を返してくれるところ。 LINE Bot を使えるように登録する Messaging API の登録をする。 Messaging APIのご紹介 | LINE Business Center Developer Trial を選ぶ。 LINE BOTの作り方を世界一わかりやすく解説（１）【アカウント準備編】 - Qiita LINE Bot を使えるように設定する LINE@ MANAGER から以下の感じに Bot を設定する。 API を利用する Webhook を利用する グループトーク参加を利用する 自動応答メッセージを利用しない 友だち追加時あいさつを利用しない 基本設定アカウントページメニュー非表示 LINE Bot と友だちになってグループトークを作成 QR コードから</description></item><item><title>Hugo でシンタックスハイライトを使う</title><link>https://blog.5000164.jp/2017/8/14/syntax-highlighting/</link><pubDate>Mon, 14 Aug 2017 22:44:23 +0900</pubDate><guid>https://blog.5000164.jp/2017/8/14/syntax-highlighting/</guid><description>2018.1.20 追記 バージョン 0.28 から導入された Chroma で何も考えず簡単にシンタックスハイライトが使えるようになった。 Hugo | Hugo 0.28: High-speed Syntax Highlighting! Hugo | Syntax Highlighting 結論 シンタックスハイライト用の css をテーマで読み込んでおく config.toml に下記の設定を追加 1 2 3 4 5 pygmentscodefences = true pygmentsCodeFencesGuessSyntax = true pygmentsStyle = &amp;#34;monokai&amp;#34; pygmentsUseClasses = true pygmentsoptions = &amp;#34;linenos=inline&amp;#34; 背景 コードを見やすくしたいからシンタックスハイライトを使おうと思った。 やってみたら思ったよりもできなかった。 なんか疲れたのでメモ。 手順 Pygments をインストールする シンタックスハイライトするのに必要なやつ。 何も考えずに入れる。 1 sudo easy_install Pygments シンタックスハイライト用の css を生成する カラーコードを直接埋め込む方法もあるけど、クラスで指定した方がかっこいいと思ったのでクラスで指定する。 クラスで指定する場合は css を事前に生成しておいて読むこんでおく必要がある。 下記のコマンドで css を生成する。 デフォルトで用意されていないカラースキーマの使い方がわからなかったので今回は monokai を使う。 1 pygmentize -f html -S monokai -a</description></item><item><title>Jekyll の記事と WordPress の記事を Hugo にインポートする</title><link>https://blog.5000164.jp/2017/8/13/import/</link><pubDate>Sun, 13 Aug 2017 05:17:55 +0900</pubDate><guid>https://blog.5000164.jp/2017/8/13/import/</guid><description>背景 WordPress から Jekyll に移行した時に記事の移行が面倒で放っておいた。 Hugo に移行することにしたから Jekyll の記事と WordPress の記事を Hugo にインポートすることになった。 つらい。 Hugo に合わせた最終的な形式 こんな感じに統一することを目指す。 記事のファイルの見通しをよくするためにディレクトリを分けて管理したかったので URL は各ファイルで指定する。 1 2 3 4 5 6 7 8 9 +++ title = &amp;#34;Jekyll の記事と WordPress の記事を Hugo にインポートする&amp;#34; date = 2017-08-13T04:26:50+09:00 aliases = [&amp;#34;/2017-08-import/&amp;#34;] +++ ## 記事内容 つらつら 手順 実際に行ったインポート作業の内容はこちら。 Feature import article by 5000164 · Pull Request #2 · 5000164/blog WordPress の記事を Markdown 形式に変換する 最初は Jekyll に移行しようと思ってたのでこれを使いました。 benbalter/wordpress-to-jekyll-exporter: One-click WordPress plugin that converts all posts, pages, taxonomies, metadata, and settings to Markdown and YAML which can be dropped into Jekyll ファイル名を調整する なんか日付がたくさんついてたので年と月でディレクトリを分けてからファイル名をきれいにした。 1 2 brew install rename find . -name &amp;#34;*.md&amp;#34; | xargs rename &amp;#39;s/\d\d\d\d-\d\d-\d\d-\d\d\d\d-\d\d-//&amp;#39; Jekyll の記事の URL はファイル名に依存してたのでファイルの中に書き込む フ</description></item><item><title>ブログを Hugo に移行しました</title><link>https://blog.5000164.jp/2017/8/13/blog/</link><pubDate>Sun, 13 Aug 2017 04:19:22 +0900</pubDate><guid>https://blog.5000164.jp/2017/8/13/blog/</guid><description>管理しやすいブログにしたかった 前は Jekyll で GitHub の機能を使ってブログを公開していたが、パソコンを変えたら環境構築が面倒でブログの環境を作ってなかった。 だからもっとシンプルな構成で管理したくて興味があった Hugo に乗り換えた。 ついでに過去の記事をインポートした Jekyll に移行した時に、その前の WordPress の記事をインポートしていなかった。 それをサボっていたせいで WordPress と Jekyll の両方の記事をインポートしなきゃいけなくて手間だった。 やっとブログ環境を手に入れた これで更新し放題や。</description></item></channel></rss>