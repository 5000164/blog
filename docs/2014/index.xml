<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2014s on 5000164 is here</title>
    <link>http://blog.5000164.jp/2014/</link>
    <description>Recent content in 2014s on 5000164 is here</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 31 Dec 2014 19:35:46 +0900</lastBuildDate>
    
	<atom:link href="http://blog.5000164.jp/2014/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2014 年を振り返る</title>
      <link>http://blog.5000164.jp/2014-12-2014/</link>
      <pubDate>Wed, 31 Dec 2014 19:35:46 +0900</pubDate>
      
      <guid>http://blog.5000164.jp/2014-12-2014/</guid>
      <description>2014 年を振り返ってみる 長い時間を生きていく中で、節目節目にキリをつけて振り返ることは大事。
年末というのはちょうどいいチャンスなので、1 年間を振り返る。
プログラマとして生きていくと決めた 今年はプログラマとしての仕事を再開して、プログラマとして生きていくと決めた。
これに尽きる。
去年は目標を立てなかった なにか振り返りをしようと思って、いろいろ見返して、いろんなことがあったなーと思ったけど、目標がなかったから目標に対する振り返りができなかった。
来年の目標を立てる 来年の目標を立てようと思う。
今年のだめなところ 目標を立てるためにまずはだめだったところを考える。
アウトプットが少なかった。
ビビってる。
来年の目標 なので、来年の目標はアウトプットすること。
個人のプロジェクトを立てて、仕事とは別に進める。
まとめ もっと気楽に生きること。
生きづらいと感じたら、生き方を変えること。</description>
    </item>
    
    <item>
      <title>Windows の Atom で矩形選択する方法</title>
      <link>http://blog.5000164.jp/2014-12-atom/</link>
      <pubDate>Mon, 01 Dec 2014 23:55:30 +0900</pubDate>
      
      <guid>http://blog.5000164.jp/2014-12-atom/</guid>
      <description>結論 Windows の Atom はセンタークリックのドラッグで矩形選択できる。
Windows の Atom で矩形選択するやり方です まず、Atom はこれ。
Atom
んで、このプラグインを入れる。
sublime-style-column-selection
Mac なら option を押しながら左クリックのドラッグで矩形選択できる。
でも Windows だと Alt キーを押しながら左クリックでドラッグしても矩形選択できない。
Windows はセンタークリックのドラッグで矩形選択できる。
Mac でも Windows でも全角文字は選択範囲がずれる。</description>
    </item>
    
    <item>
      <title>動画の話 - 「「動画」にまつわる技術・物語 〜我々はどのように動画と関わっていくのか〜」に参加しました</title>
      <link>http://blog.5000164.jp/2014-12-video/</link>
      <pubDate>Mon, 01 Dec 2014 23:35:03 +0900</pubDate>
      
      <guid>http://blog.5000164.jp/2014-12-video/</guid>
      <description>「「動画」にまつわる技術・物語 〜我々はどのように動画と関わっていくのか〜」に参加しました 詳細はこちら。
「動画」にまつわる技術・物語 〜我々はどのように動画と関わっていくのか〜 - DevLOVE | Doorkeeper
配信と再生と企画の話 動画に対して異なる立場からの話が聞けた。
配信の話 インフラにもっと興味を持とうと思った。
明日会社に行ったらインフラがどういう構成なのか聞こう。
どんどん変わっていく環境にどんどん対応していくのが大事。
再生の話 動画の仕組みがなんとなくわかった。
おもしろかった。
音と絵を同期させるのが大変らしい。
企画の話 今まではサービスの開発といったら実装のことを考えていた。
でも、サービスのことを考えるのも、実際に使ってもらって声を聞くのも開発だと思った。
まとめ おもしろかった。
明日から現場に持ち込むものとして、インフラに興味を持つこと。
明日インフラの構成聞く。</description>
    </item>
    
    <item>
      <title>シンプルさ - 「Go Conference 2014 autumn」に参加しました</title>
      <link>http://blog.5000164.jp/2014-11-gocon/</link>
      <pubDate>Sun, 30 Nov 2014 23:04:02 +0900</pubDate>
      
      <guid>http://blog.5000164.jp/2014-11-gocon/</guid>
      <description>「Go Conference 2014 autumn」に参加しました イベントの詳細はこちら。
Go Conference 2014 autumn - connpass
GoCon/2014autumn.rst at master · GoCon/GoCon
内容についてはこちら。
#goconに関するツイート
Go Conference 2014 autumn - Togetterまとめ
わからないことが多かった Go に興味があって参加した。
けど、触ったことがなかったので、わからない部分が多かった。
でも刺激はもらえた。
シンプル Go はシンプルさを大事にしているとのことだった。
楽に書くのと、読みやすく書くのはトレードオフで、読みやすさに重点を置くべき、とどこかで言っていた気がする。
最近どこかで、プログラマはプログラムを書いてる時間よりも読んでいる時間の方が圧倒的に長いのだから読みやすさを大事にするべき、と聞いた気がする。
これにはとても納得しているし、私自身も読んで理解するのにかかる時間が短いコードがいいコードだと考えているので、Go の思想は魅力的に感じた。
複雑さを隠してシンプルに見せる Go はシンプルに使えるように難しいことは内部で頑張って隠すとのことだった。
頑張るのはきっと大変なのだろうけど、そこには頑張る価値があるのだろう。
これは私の勝手な考えなのだが、実装回数と利用回数の問題だと感じた。
内側にいけばいくほど、機能を実装する回数が少なくなり、利用される回数が多くなる。
外側にいけばいくほど、機能を実装する回数が多くなり、利用される回数が少なくなる。
よって、内側の方が複雑度は増すが、内側で頑張って外側をシンプルにした方が最終的に楽できるということだろう。
Go の高まりを感じた Go はコマンドラインツールを簡単に作れるらしい。
そしてクロスプラットフォームで動くらしい。
なんか作るときは Go を使う。</description>
    </item>
    
    <item>
      <title>しっくりこない - 小説「クドリャフカの順番」の感想</title>
      <link>http://blog.5000164.jp/2014-11-welcome_to_kanya_festa/</link>
      <pubDate>Sun, 23 Nov 2014 15:05:42 +0900</pubDate>
      
      <guid>http://blog.5000164.jp/2014-11-welcome_to_kanya_festa/</guid>
      <description>※ ネタバレ注意
 谷くんの立場がよくわからなかった 谷くんはなにがしたかったんだろう。
動機がしっくりこない 氷菓もそうだったけど、ストーリーがすっきりまとまってない気がする。
クが既に失われてたとして、そのメッセージが伝わったとして、それでどうなるっていうんだろう。
表向きは文化祭を盛り上げたくて、実はメッセージが、って方がしっくりくる。
コストとリターンが見合ってないなー。
「〈古典部〉シリーズ」 読む。
トランプの柄で 4 人が表現されてたのはけっこーしっくりきた。
ホータローの姉はジョーカーだな。</description>
    </item>
    
    <item>
      <title>最初から完璧を求めない - 「TDDBC in Tokyo 2014-11」に参加しました</title>
      <link>http://blog.5000164.jp/2014-11-tddbc/</link>
      <pubDate>Sat, 22 Nov 2014 23:08:52 +0900</pubDate>
      
      <guid>http://blog.5000164.jp/2014-11-tddbc/</guid>
      <description>「TDDBC in Tokyo 2014-11」に参加しました イベントの詳細はこちら。
TDDBC in Tokyo 2014-11 - TDDBC | Doorkeeper
課題はこちら。
TDD演習課題 - TODOリストアプリ
私の組の実装はこちら。
5000164/tddbc-tokyo_2014-11
理解しやすいテストを書く 基調講演は xUnit Test Patterns の著者である Gerard Meszaros さんの「Refactoring a Test」だった。
単体テストはわかりやすく書く。
悪いコードが示されて、ここはこうする、次はこうする、と話してくれた。
1 つのテストコードは 5 行に抑える、7 行を超えると理解しづらくなる。
カスタムアサーションというものを知った。
すっきり書けるようになっててよかった。
なにをテストしたいのか？ このテストケースではなにをテストしたいのかを明確にする。
重要でないセットアップは 1 つのメソッドにまとめてしまう。
こうすることで、どこにフォーカスしたいテストなのかがわかりやすくなる。
やっぱ英語はできないとだめだ リアルタイムのヒアリングだとほとんど理解できなかった。
単体テストの部分は、なんとなく知っている部分があったのでほんのりわかったが、機能テストとかの話になったら理解できなくなった。
英語ができないってだけでアクセスできる情報が制限されるのってやっぱり残念だ。
TDD はやっぱりおもしろい気がする あの感じ好きだ。
設計とかをもっと考えられるようになりたい。
テストの粒度というか責務というかがわからない というか全体的によくわかってない。
これをまずは立ち読みしてみる。

やれるところからやる いきなりはできない。
最初から完璧な TDD を回すことはできない。
経験が必要。
やれないからやらないではいつまでもできない。
やれるところからやる。
実装するときに、TDD できそうか考える。
やれそうならやる。
やれないならなぜやれないのか考える。</description>
    </item>
    
    <item>
      <title>夢を語り合える世界をつくりたい - 「Hoping Invites | Tsutomu Uematsu | TEDxSapporo」の感想</title>
      <link>http://blog.5000164.jp/2014-11-hoping_invites/</link>
      <pubDate>Sat, 22 Nov 2014 00:12:40 +0900</pubDate>
      
      <guid>http://blog.5000164.jp/2014-11-hoping_invites/</guid>
      <description>ひとりでも多くの子どもたちが、可能性を奪われなくなったらいいなぁ 植松さんは講演の中でこう言っていた。
この言葉にとても共感した。
少しでも多くの可能性を持っていて欲しい。
周りの大人が可能性を奪ってしまう 子供に向かって、どーせ無理と言う。
やったことがない大人が、自分がしなかった理由を子供に押し付ける。
夢を見る子供を脅す。
子供の可能性が潰されてしまう。
悲しい。
可能性を奪わないために どーせ無理は言わない。
だったらこうしてみたら？を言う。
教育というものは、死に至らない失敗を安全に経験させるためのもの 失敗は悪いものではない。
可能性と自信を失うものではない。
失敗はよりよくするためのデータである。
なにもないところから踏み出した一歩目である。
そこに自信を持つ。
植松さんにとって宇宙開発は手段 どーせ無理だと思われがちな宇宙開発をやることで、無理じゃないと示している。
子どもたちに無理じゃないって思って欲しい。
そういう思いが伝わってきた。
不満はそこにある、そこに積極的に提案する 内心的などーせ無理もきっとある。
そこに、だったらこうしてみたら？を言えるようになりたい。</description>
    </item>
    
    <item>
      <title>これはしてやられた - 小説「愚者のエンドロール」の感想</title>
      <link>http://blog.5000164.jp/2014-11-why_didnt_she_ask_eba/</link>
      <pubDate>Tue, 18 Nov 2014 01:23:43 +0900</pubDate>
      
      <guid>http://blog.5000164.jp/2014-11-why_didnt_she_ask_eba/</guid>
      <description>※ ネタバレ注意
 米澤 穂信さんはミステリーが好きなんだろうなと思った なんというか、ミステリーへの愛に溢れている作品だと思った。
感情の込もった作品は読んでて気持ちいい。
内容には、してやられた 全員実現できない、じゃあカメラマンだろ、と思っていた。
伊原がカメラワークに対して物足りないと言っていたし。
でもそれは作者の思惑通りだった。
まんまとひっかかってしまった。
正直、これはやられたと思った。
「〈古典部〉シリーズ」は今後も読む これからどうなるのか楽しみ。</description>
    </item>
    
    <item>
      <title>叫ぶ強さ - 小説「氷菓」の感想</title>
      <link>http://blog.5000164.jp/2014-11-the_niece_of_time/</link>
      <pubDate>Tue, 18 Nov 2014 01:02:24 +0900</pubDate>
      
      <guid>http://blog.5000164.jp/2014-11-the_niece_of_time/</guid>
      <description>※ ネタバレ注意
 電車で読む本が欲しかった 電車に 30 分くらい乗り続ける時間があった。
手持ち無沙汰だなと思って電子書籍を買うことにした。
米澤 穂信さんの作品がおもしろいと見かけた記憶があった なにを買おうかなと思った時に、氷菓を思い出した。
いつか読んでみたいと思っていたので買った。
その場で買ってその場で読めるのはいい。
話に置いて行かれるところがあった たまに作品に置いて行かれるところがあった。
私の知らない言い回しなどがよく出てくるので、そのせいかもしれない。
結末はあんまりすっきりしなかった おれにできることはこれくらいしかない、と言っていたわりには回りくどすぎる。
叫ぶ強さを持て、という点は大いに同意だが、それを I scream に込めるのはどうだろうか。
もうちょっとなんとかならなかったのかなと思う。
「〈古典部〉シリーズ」は読んでみようと思う 興味があるので読む。</description>
    </item>
    
    <item>
      <title>ブログの手順</title>
      <link>http://blog.5000164.jp/2014-11-blog/</link>
      <pubDate>Tue, 18 Nov 2014 00:24:39 +0900</pubDate>
      
      <guid>http://blog.5000164.jp/2014-11-blog/</guid>
      <description> Octopress をインストールしているディレクトリに移動  cd Blog/  ブログの記事を生成  bundle exec rake new_post[&#39;URL にする文字列&#39;]  日付のプレフィックスは自動で付与されるので「blog」などだけでよい   生成された記事のマークダウンファイルをハイフンつなぎからアンダーバーつなぎに変える  アンダーバーで入力してもハイフンにされるため  生成された記事を開いて書く  title を記事のタイトルに変える  記事を書いたらプレビュー  bundle exec rake preview http://localhost:4000/  プレビューして問題なかったら公開  bundle exec rake gen_deploy  公開したらバージョン管理  SourceTree でコミット  コミットメッセージは「記事追加」とか適宜入力   本番環境で動作確認、文章見直し  5000164 is here   </description>
    </item>
    
    <item>
      <title>Android 実機の SQLite ファイルをローカルに持ってくる</title>
      <link>http://blog.5000164.jp/2014-11-sqlite/</link>
      <pubDate>Fri, 14 Nov 2014 20:39:16 +0900</pubDate>
      
      <guid>http://blog.5000164.jp/2014-11-sqlite/</guid>
      <description>結論 1adb shell 2run-as {パッケージ名} cat databases/{DB 名} &amp;gt; /sdcard/{DB 名} 3exit 4adb pull /sdcard/{DB 名} ~/Downloads/{DB 名}  解説 adb pull ではパッケージの権限がないため直接ファイルを取得できない
なので run-as コマンドを使いパッケージの権限があるユーザーで adb pull できる領域にファイルをコピー
Android は cp コマンドがないので cat コマンドの出力をリダイレクトして同じ内容のファイルを生成している
ファイルが adb pull できる領域にコピーできたので adb pull
あとはローカルで好きにできる 好きな GUI で簡単に見られる
継続的に繰り返すのは大変だけど、手軽に見られるのは楽
DB Browser for SQLite
SQLite Manager :: Add-ons for Firefox
まとめ 1adb -d shell &amp;#34;run-as {パッケージ名} cat databases/{DB 名} &amp;gt; /sdcard/{DB 名}&amp;#34; 2adb pull /sdcard/{DB 名} ~/Downloads/{DB 名}  ってやれば 2 行でいけるかも知れないけど未検証</description>
    </item>
    
    <item>
      <title>Processing 始めました</title>
      <link>http://blog.5000164.jp/2014-11-processing_practice_1/</link>
      <pubDate>Wed, 12 Nov 2014 04:52:21 +0900</pubDate>
      
      <guid>http://blog.5000164.jp/2014-11-processing_practice_1/</guid>
      <description>Processing がおもしろそうだった このあたりのブログを見ていておもしろそうだった
インタラクティブ・プログラミング勉強会 第1回 乱数 | fladdict
標本002 三角関数 | fladdict
インタラクティブデザイン勉強会 第1回「ランダム」 — フニフニ微生物ができるまで | ここぽんのーと
インタラクティブデザイン勉強会 第2回「三角関数」でプロペラを回す | ここぽんのーと
インタラクティブデザイン勉強会 第3回「パーティクル」で爆発四散 | ここぽんのーと
どうやら Processing というものを使うとできるらしい
Processing 触ってみた 勉強会の課題を勝手にやってみました
こんなんができました  実行結果   ソースはここにあります 5000164/processing-practice-1
まとめ 楽しい</description>
    </item>
    
    <item>
      <title>まずは手を動かす - 「TDDBC仙台 4th」に参加しました</title>
      <link>http://blog.5000164.jp/2014-10-tddbc/</link>
      <pubDate>Sat, 11 Oct 2014 22:28:33 +0900</pubDate>
      
      <guid>http://blog.5000164.jp/2014-10-tddbc/</guid>
      <description>「TDDBC仙台 4th」に参加しました イベントの詳細はこちら。
TDDBC仙台 4th - TDDBC | Doorkeeper
今回の課題と私の組の実装はこちら。
TDD Boot Camp(TDDBC) - TDDBC仙台04/課題
5000164/tddbc-sendai04
参加してよかった 初めて TDD &amp;amp; ペアプロ をやった。
TDD というものを知ってはいたものの、ちゃんとやったことはなかった。
どころかまともにテストコードも書けないので、自分にはまだ早いと決めつけていた。
でもイベントを知った時からすごい良さそうな雰囲気を感じて参加してみた。
参加してよかった。
TDD は開発者を後押しするためのもの テストという言葉にはいろいろな意味が含まれてしまう。
お互いの共通言語になりにくい。
だから、一度意味をリセットする。
TDD の T とはなにか。
T は Test の T だが、意味合いとしては Checking に近い。
テストを目的毎に区切る。
TDD は開発者をサポートするものである。
ペアプロで助けてもらった ペアプロも初めてだったけど、思ってたよりもいいものだった。
コードを通してお互いの知見を共有できる。
今回は教えてもらうことの方が圧倒的に多かったのでがんばりたい。
やっぱりペアプロはすきを見てやっていきたい。
TDD をやってみるとけっこう楽しいかも 黄金のサイクルと紹介されていたけど、TDD のリズムがいい感じだった。
まずこれ、次これ、そしたらこれ。
こんな感じでとことこ進んでいく。
一息入れて、んじゃリファクタするか、という感じもいいかも。
なんにせよ、やっぱりまずはやってみたい。
もっと経験を積まないといけない。
他人のコードは勉強になる コードレビューを全体で行った時に、自分じゃ思い至らない実装や質問が出ていた。
正直、理解できない単語もいくつかあったので、勉強不足だと思う。
実際に、自分よりも上のコードを見れたのはよかった。
自分が書いたコードが動いているという自信 自分に自信がつくのではなく、自分が書いたコードに自信がつく。
TDD をやったら実力がつくというわけではない。</description>
    </item>
    
    <item>
      <title>わからないことがわかった - 「DDD勉強会×すくすくスクラム仙台」に参加しました</title>
      <link>http://blog.5000164.jp/2014-09-sukusuku/</link>
      <pubDate>Sun, 14 Sep 2014 00:57:37 +0900</pubDate>
      
      <guid>http://blog.5000164.jp/2014-09-sukusuku/</guid>
      <description>「DDD勉強会×すくすくスクラム仙台」に参加しました イベントの詳細はこちら。
DDD勉強会×すくすくスクラム仙台　コラボ企画　「Scrum でモデリングってどうしよう。プロダクトバックログとモデリングのいい関係」 - すくすくスクラム仙台 | Doorkeeper
わからないことがわかった DDD も、Scrum も、全然わかってないけど興味があった。
どんなものか知りたかった。
だから参加した。
その結果、自分がわからないことがわかった。
いや、当たり前のことなんですけど、厳然と事実として目の前につきつけられた。
わからないことがわかることが改善の一歩目 自分が開発する時に、この機能はこういうように実装しよう、と考える。
そこには明確な基準がない。
自分が楽に実装できそうなこと、が基準だけど、その「楽」の基準がない。
なんとなく作ってる。
だから、ごちゃごちゃになる。
ここに、基準が作れそうだと感じた。
優先順位を付けて最小で回す 機能を洗い出す。
優先順位を付ける。
最小で設計する。
最小で実装する。
これを回す。
こうすればいいのかなと思った。
でもまだよくわかってないので、もっと知りたい。
大きい単位で見せたがる ものを作ると、なるべく見栄えをよくしようとする。
そうすると、単位が大きくなる。
単位が大きくなると、認識がずれていた時のリスクが大きくなる。
そして手間がかかっていればかかっているほど、相手も意見が言いづらくなる。
なるべく小さい単位で見せる。
すごいしょぼい状態で見せる。
そうすると、批判してもらえる。
こんなの使えない、となったら、じゃあこうしましょう、となる。
小さい単位で見せる。
安定的に不安定 一定した環境にいると、安定してしまう。
安定してしまうと、変化がなくなる。
現状の能力で生きていこうとする。
それではなにかあった時に対応できない。
だから、不安定な状態を作り出す。
そうすれば、適応しようとして成長する。
無能に悪意を見出さない 自分が意味わからないと思ったら聞く。
そこに悪意はない。
ハンロンの剃刀 - Wikipedia
新人を育てるには上司が楽しそうに仕事をすればいい 上司が眉間にしわを寄せて仕事をしていたら、社内で出世しようとは思わないだろう。
上司が楽しそうに仕事してれば、羨ましいと思う。
そんなに楽しいなら自分もその仕事がしたいと思う。
そうすれば、成長する。
周りからわかるように楽しくする 自分は楽しそうに仕事できているか。
楽しそうに改善できているか。
自分がすごい楽しそうにしてたり、すごい楽してたら、周りはきっと気になるはず。
それどうやってるの？と聞いてくるはず。
そうしたら、どんどん周りに広げていける
大事なのは、これいいですよと押し付けるのではなく、自分が楽しそうにすること。
自分がすごい楽すること。</description>
    </item>
    
    <item>
      <title>代わり映えのない二年間 - 小説「四畳半神話大系」の感想</title>
      <link>http://blog.5000164.jp/2014-07-yojouhan_shinwa_taikei/</link>
      <pubDate>Sat, 05 Jul 2014 10:24:22 +0900</pubDate>
      
      <guid>http://blog.5000164.jp/2014-07-yojouhan_shinwa_taikei/</guid>
      <description>※ネタバレ注意
アニメを見たので、小説を読んだ この記事でアニメの感想を書きましたが、アニメを見たら原作が気になったので小説を読みました。
アニメはよくできている 原作を読んで思ったのは、アニメはよくできてるなー、ということでした。
原作をうまく解釈してアニメという形に合わせた感じがします。
やや間延びした印象を受けたのも、1話30分で1クールという決まったものがある以上しょうがないのかなと思います。
よく30分でうまく区切りをつけたと思います。
ただ、アニメだと時計の演出があってタイムリープもののように感じられましたが、実際はそうではないと思ったのが残念なところ。
森見登美彦らしい表現が楽しい 随所に森見登美彦らしい言葉づかいが感じられて、楽しめました。
代わり映えのない二年間 どの世界の「私」も、明石さんとはうまくいくことができた。
小津とも親友であった。
どの世界でも代わり映えのない二年間であった。
人生は選択の連続である 選択することとは、同時に選択しないことでもある。
選択次第で人生は変わる。
違う選択をしていれば違う人生もあっただろう。
しかし、どの人生でも、他の何者にもなれない自分であることに変わりはない。
それを受け入れ、腰を据えよう。
過去の自分を大目に見よう 過去の自分は、もちろんいくつもの過ちを犯してきただろう。
そんな自分の過去を全て肯定して自分を抱きしめる必要はない。
けれども、大目に見てやってもいいのではないか。</description>
    </item>
    
    <item>
      <title>その一歩をいつ踏み出すのか – アニメ「四畳半神話大系」の感想</title>
      <link>http://blog.5000164.jp/2014-07-yojouhan/</link>
      <pubDate>Tue, 01 Jul 2014 23:25:42 +0900</pubDate>
      
      <guid>http://blog.5000164.jp/2014-07-yojouhan/</guid>
      <description>※ネタバレ注意
友人におすすめされました おすすめのアニメを友人に聞いたところ、四畳半神話大系をおすすめされたので見ました。
原作が森見登美彦とのことで、「太陽の塔」と「夜は短し歩けよ乙女」がおもしろかったので期待。
森見登美彦っぽくておもしろかった 全体的に非常に雰囲気がよかったです。
キャラクター原案が中村佑介で、うまいことキャラが動いているなと感じました。
初めて森見登美彦を読んだきっかけが中村佑介の表紙で、登場人物のどこか浮世離れしたところが絵のイメージとしっくりくるなと思っていたので、中村佑介っぽい絵が動いてるのは楽しかったです。
また、主人公のナレーションを含め、メインキャストの声に違和感がないのがよかった。
森見登美彦作品の雰囲気がうまく出ていて、おもしろかったです。
アニメには合っていない気がした 作品自体はおもしろかったのですが、中盤やや間延びした印象を受けました。
アニメの30分区切りという性質にうまく合っていなかったように思います。
もっと内容を詰めて短くしてもよかった。
最後にググッっともってくるのはさすが 四畳半に閉じ込められて、自分の他の可能性に気付いて、それでも、今この自分は一歩踏み出せるんだと気付いた時に、世界が開ける。
印象的だったところ 小津が香織さんを回収しにきた時に、顔がおかしいと思ったけど、妖怪みたいな顔は小津の一面だったというところ。
どのパラレルワールドでも、明石さんのもちぐまを持っているところ。
原作を読みたくなった きっと、原作もおもしろいと思う。
でも、明石さんの驚いた顔はアニメでしか見れないのだろう。
責任者はどこか 私の人生の責任者はどこか。
それは私だ。</description>
    </item>
    
    <item>
      <title>新しい考え方をもらった – Agile Japan 2014 仙台サテライトに参加しました</title>
      <link>http://blog.5000164.jp/2014-06-agilejapan/</link>
      <pubDate>Fri, 27 Jun 2014 22:54:42 +0900</pubDate>
      
      <guid>http://blog.5000164.jp/2014-06-agilejapan/</guid>
      <description>Agile Japan 2014 仙台サテライトに参加しました イベントの詳細はこちら。
イベント案内 | 2014-06-27 (金) Agile Japan 2014 仙台サテライト 「ひとりぼっちは、寂しいもんな」 #AgileJapan - 東北デベロッパーズコミュニティ
柔軟な考え方をもらいました ためになる話をいくつも聞けて、自分の中にはなかった新しい考え方をもらいました。
今まで自分の中にあったものよりも、もっともっと柔軟な考え方をもらいました。
以下、自分の解釈です。
アジャイルを導入するために、アジャイルを説明しない アジャイルとは、ソフトウェア価値の最大化であり、利益を最大化する姿勢である。
その手法として Scrum や XP があるのであり、それ自体はアジャイルではない。
このアジャイルというものを説明するのが非常に難しい。
やってみるのが一番わかりやすい。
じゃあやってみるためにはどうするか。
アジャイルを説明しないで、プラクティスを1つ1つ試してみる。
まずは KPT によるふりかえりだけ試してみる、など。
それで、これいいねとなったらまた次のプラクティスを導入する。
アジャイルアジャイルと肩肘張るのではなく、少しずつ試してみる。
改善が本質であり、プロセスの尊守は大事ではない。
日本語と日本の文化を大事にする 日本の文化は、相手を思いやる文化である。
日本語は、相手によって言葉が変わる。
この洞察力が日本人の素晴らしい能力。
単一民族のみでチームを構成するという強さ。
レースは速さではなく精度と効率 博打をやってはいけない。
速さを競うものではなく、いかに精度よく効率よくタイムを縮めるか。
Try &amp;amp; Error は壊れた &amp;amp; 直したであり、ここにコストをかけない。
エラーを出さないために、予測可能なものだけを実行する。
未来の目標をチームで共有することで、予測を可能にする。
データはマネジメントツール 裁量権を現場に与える。
現場の判断を周りに納得させるためにデータを使う。
現場の技術力が最上流工程 できもしないものを設計してもしかたがない。
現場の技術力で設計の幅が決まる。
現場のレベルが上がらなければ、設計のレベルは上がらない。
未来は言語化できない 言語は過去のものであり、コミュニケーションツールである。
未来のことは、過去には存在したことがないから言葉が存在しない。
未来は画像であり、その具体的なシーンを共有する。
具体的なシーンを想像できる目標をつくる。
権限ではなく責任をもらう メンバーは失敗する。
その失敗を最大限リカバーするために責任をもらう。</description>
    </item>
    
    <item>
      <title>UbuntuのIntelliJ IDEAでJUnitを使う準備をする</title>
      <link>http://blog.5000164.jp/2014-06-junit/</link>
      <pubDate>Sat, 14 Jun 2014 22:46:26 +0900</pubDate>
      
      <guid>http://blog.5000164.jp/2014-06-junit/</guid>
      <description>Ubuntuのバージョン ubuntu 14.04 LTS
64bit
Javaのインストール 1sudo apt-get update 2sudo apt-get install -y python-software-properties 3sudo add-apt-repository ppa:webupd8team/java 4sudo apt-get update 5sudo apt-get install -y oracle-java8-installer 6sudo update-java-alternatives -s java-7-oracle  参考
Ubuntu 12.04 LTS に Java (Oracle JDK) をインストールする - xykのブログ
IntelliJ IDEAのインストール 公式サイトからダウンロードする
IntelliJ IDEA — The Best Java and Polyglot IDE
任意のディレクトリに配置
IntelliJ IDEAの起動 解凍したディレクトリ内のbin/idea.shを実行
プロジェクトの作成 Java を選択
Project SDK で New -&amp;gt; JDK を選択
/usr/lib/jvm/java-8-oracleを選択してOK
JUnitをインストール GitHub のリンクからjunit.</description>
    </item>
    
    <item>
      <title>気分が悪くなったらよつばと！を読もう</title>
      <link>http://blog.5000164.jp/2014-05-yotsubato/</link>
      <pubDate>Mon, 19 May 2014 22:30:02 +0900</pubDate>
      
      <guid>http://blog.5000164.jp/2014-05-yotsubato/</guid>
      <description>最近よつばと！を読んでいます よつばと！面白いですよね。
何回読んでも面白い。
気分が悪くなる時ってありますよね なんだか気に食わないことが連続しておこったり。
特に意味もなくイライラしたり。
そういう時がありますよね。
私はよくあります。
この前も気分が悪くなった この前は特に意味もなく気分が悪くなりました。
そういう時って他人の一挙手一投足がやけに目について不快感を覚えてしまいます。
いつもの感じでよつばと！を読んだ 最近よつばと！を読んでいるので、いつもの感じで読みました。
読んでたら気分がよくなった さっきまで感じてたいやな気分を感じなくなりました。
むしろいい気分になりました。
理由はよくわからないけど、救われた なぜ気分がよくなったのか、それはまだよくわかっていません。
よつばと！については考える余地が多く残っていそうです。
でも結果はよくわかりました。
暗澹とした気持ちを救ってくれたのです。
気分が悪くなったらよつばと！を読もう つまり、そういうことです。
おまけ 公式で、2話分の試し読みができます。
コミックス「よつばと！」</description>
    </item>
    
    <item>
      <title>体調不良で早退した</title>
      <link>http://blog.5000164.jp/2014-05-sick/</link>
      <pubDate>Thu, 15 May 2014 23:07:13 +0900</pubDate>
      
      <guid>http://blog.5000164.jp/2014-05-sick/</guid>
      <description>なんだか突然具合が悪くなった 朝はなんともなかったのに、昼過ぎくらいから急に体調が悪くなったので早退しました。
症状としては、頭が重いのと、吐き気ですかね。
具合が悪くなった時は余計な心配をせずに帰りたい ただでさえ具合が悪い状態の時に、余計な心配はしたくない。
帰ったら迷惑になるんじゃないか、とかそんなことは考えたくない。
頭脳労働で頭がうまく働かないのは致命的 そもそも頭がうまく働いてない時点で生産性はガタ落ちである。
そんな状態で無理に作業するよりも、さっさと体調を治してから作業を再開した方がいい。
目先の進捗に気を取られると、体調不良がずるずると長引いてしまう。
もし風邪だったら周りに風邪をうつしてしまうリスクがある もし体調不良の原因がウイルス性のものだった場合、自分がその場に居続けるだけで周りの人にリスクを負わせ続けることになる。
風邪を完全に防ぐことはできないので、具合が悪かったらおとなしく隔離されるべきである。
つまり、具合が悪い時はさっさと帰るに限る 無理してもいいことはない。
もし、自分の体調不良に気付けない場合 仕事をしていて、自分の体調不良に気付けない場合がある。
というか、私にはあった。
普通に仕事ができてると思っていたけど、実は体調が悪かったということが。
自分の体調不良に気付くために、自分の仕事量を調べるといい 仕事がうまく進まなかったら、それはなにかがおかしいということ。
体調は悪くないとしても、現状を疑ったほうがいい。
少しづつ変化していくものには気付きづらい 徐々に変わっていくとわからないものである。
そのために、定量的な指標が必要になる。
例えば、普段からタイムトラッキングをする 普段から自分がどのくらいの作業をどのくらいの時間でできるのかを知る。
自分の作業にどのくらいの時間がかかるかわかれば「あれ、この作業に時間かかりすぎだろ」って気付ける。
まとめ 体調不良になったら帰る。
仕事進まなかったら現状を疑う。
私はタイムトラッキングにこのツールを使ってます。
Toggl - Insanely simple time tracking</description>
    </item>
    
    <item>
      <title>合コンに参加してから落ち着かない心の平穏を取り戻すために</title>
      <link>http://blog.5000164.jp/2014-05-calm/</link>
      <pubDate>Wed, 14 May 2014 22:48:40 +0900</pubDate>
      
      <guid>http://blog.5000164.jp/2014-05-calm/</guid>
      <description>僭越ながら合コンに参加させていただきました この度、ありがたいことにご縁がありまして、合コンに参加させていただきました。
合コンに参加するのは4ヶ月ぶり2度目になります。
それ以来、なかなかに心の中がもやもやと落ち着かないので、現在の心境などを言語化してみようと思います。
なにはともあれまずはこのような機会を与えていただいたことに感謝です。
内容については特筆しません 私が書こうとしていることは、合コンが終わってからの話なので、内容について特に触れません。
ただ、非常にありがたかったこと、非常に楽しかったこと、非常に魅力的であったことはここに記します。
合コンが終わってから心が落ち着かない なんだか心がフワフワしています。
慣れないことをしたからかも知れません。
合コンのことを思い返したり、他の女性のことを考えたり。
なんだか女性のことばかりを考えてしまいます。
初めて合コンに参加した時も舞い上がった 初めて合コンに参加したのは今年の初めのことですが、その時も合コンが終わった後は不安に駆られました。
合コンがあまりに楽しすぎて、これからの人生のバランスが取れるのだろうかと。
でもその不安は家でプログラミングをしている時に解消されました。
プログラミング超楽しい、合コン以外のこともちゃんと楽しむことができると。
そもそもなんのために合コンに参加したのか 今回心が落ち着かない最大の原因はここにあるような気がします。
私はなんのために合コンに参加したのか。
回避しようと思えば回避することはできた。
ではなぜ自らの意志で参加したのか。
それは、楽しそうだったから。
楽しむことはできたのか 大いに楽しむことができた。
プログラミングや、普段友達と遊ぶ楽しさとは、また異なったベクトルでの楽しさを感じた。
楽しめればそれで良かったのではないか たしかに、楽しかった、で終われば何も問題はない。
しかし、今現在悩んでいるということは、楽しかった以外の何かがあるということになる。
楽しい以上の何かを求めてしまった可能性 私は、もしかしたら、楽しい以上の何かを求めてしまっていたのかも知れない。
その楽しい以上の何かがなんなのかはわからないが、楽しい以上の何かを求めて、それが得られなかったとするならば、満たされない想いに悩んでいるということは考えられる。
仏教にも、見るから執着が生まれる、という教えがあった 対象を見ると心が動かされる。
実際に女性を目にすることによって、欲した心があったのではないか。
知るから執着する。
執着するから苦しむ。
承認欲求がバシバシ満たされていく 合コンでは承認欲求がバシバシ満たされて、リアルに「僕はここにいてもいいんだ」状態になる。
女性と会話しているという事実 女性に慣れていない私は、女性と会話するだけで緊張します。
うまく話せません。
女性を特別視しすぎてしまうという問題を抱えています。
下賎な話で申し訳ないですが 正直なところ、女性との身体的接触を喜ぶところはあります。
今回は肩が当たった時なんかに、喜ばしい感情を抱いてしまった。
ちょっと接触したりなんかすると、すげー緊張して頭のネジが吹っ飛ぶ感じ。
これに関しては本当に申し訳ない。
そしていろいろ考えてしまったのもまた事実で、本当に申し開きのしようもない。
自分は本当にクズだなぁと悔やむことしきりです。
上記のことをまとめると 要は、調子に乗ってる状態になる。
そして、調子に乗って途方もない欲求を抱える。
でも、その欲求が満たされることはない。
つまり、理想と現実のギャップに苦しむ。
ここでは、このギャップこそがもやもやの原因だと結論付ける。
もやもやを解消して心の平穏を取り戻すために 調子に乗って、大きな欲求を抱えていたことを自認する。
それは間違いであったと受け入れる。
深呼吸する。
簡単な原因まとめ 具体的な目標を決めずに臨んだことがよくない。
女性を見ることによって心に執着が生まれてしまった。
簡単な対策まとめ 具体的な目標を決める。
目に入ったもの全てを欲しがるのではなく、求めているものと求めていないものをしっかり区別する。
もしくは、最初から目に入らないようにする。
もしくは、このもやもやを含めて楽しむ。</description>
    </item>
    
    <item>
      <title>ブログ移転しました</title>
      <link>http://blog.5000164.jp/2014-05-blog_moved/</link>
      <pubDate>Tue, 13 May 2014 00:11:23 +0900</pubDate>
      
      <guid>http://blog.5000164.jp/2014-05-blog_moved/</guid>
      <description>WordPressからOctopressへ タイトルにもありますが、ブログを移転しました。
ブログの管理をWordPressからOctopressへ変えました。
WordPressからOctopressへ変えた理由 一番の理由としては、サーバーに公開するのが静的ファイルである、という点です。
速さという面でもセキュリティという面でも有利だと判断しました。
5000164.jpからblog.5000164.jpへ ついでにドメインも変えました。
最初は5000164.jpを私のブログのドメインとして位置づけていたのですが、5000164.jpを私のドメインとして、それに付随する形でブログのドメインを作りたいと思ったのがきっかけでした。
ドメインを変更するとそれなりに影響が出るのですが、そのあたりはせっかくの機会なので勉強したいと思います。
Windows 7からUbuntu 14へ 普段からWindowsには不満を持っていたのですが、今回Octopressをインストールする際にどうせだからUbuntuに移行してしまえ、と思ってメインOSを変えました。
やはりUbuntuの方がWindowsよりも開発しやすい環境ですね。
これから まずはOctopressに慣れるようにします。
移行した際に調べたことなどを記事にしていく予定です。
これからもよろしくお願いします。</description>
    </item>
    
    <item>
      <title>DXライブラリで読み込んだテキストをエンターで表示</title>
      <link>http://blog.5000164.jp/2014-03-dxlib_practice_2/</link>
      <pubDate>Tue, 01 Apr 2014 02:03:09 +0000</pubDate>
      
      <guid>http://blog.5000164.jp/2014-03-dxlib_practice_2/</guid>
      <description>実行結果  これが。
 こうなって。
 こうなってって。
 最終的にはこうなります。
正直こんなに長くする必要はなかった。
ソースコードはこちら。
5000164/dxlib-practice-2
ゲームなんだから入力できるようにしなくては {#ゲームなんだから入力できるようにしなくては}
前回はDXライブラリで文字を表示するだけでしたが、こんどは入力を受け付けるようにします。
とりあえずエンターキーを押したら単純に表示するだけ。
表示するテキストをファイルから読み込むようにした {#表示するテキストをファイルから読み込むようにした}
ついでに、表示するテキストを外部から読み込んでいます。
最初はUTF-8でテキストを書いていたら、文字化けをしてうまく読み込めません。
DXライブラリはShift_JISとCRLFで書かれているので、テキストもShift_JISとCRLFで書いたらうまくいきました。
プロジェクト全体の設定も、DXライブラリに合わせてShift_JISとCRLFで統一するのがいいと思います。
個人的にはUTF-8のLFが安心するのですが、DXライブラリを使っている時点で動作する環境はかなり限られるので、特に問題はないかと思います。
まとめ こんなに簡単な処理なのに、結構時間がかかりました。
やはり基礎的な知識がないと、どうすればいいのかわからないということが多いですね。</description>
    </item>
    
    <item>
      <title>変えられないエンジニア</title>
      <link>http://blog.5000164.jp/2014-03-engineer/</link>
      <pubDate>Wed, 26 Mar 2014 23:03:14 +0000</pubDate>
      
      <guid>http://blog.5000164.jp/2014-03-engineer/</guid>
      <description>「君は変えられるエンジニアか？変えられないエンジニアか？」 下記リンクから引用
PHPerのためのJenkins | アライドアーキテクツ エンジニアブログ
私は変えられないエンジニアだった。
そして逃げ出してしまった。
逃げ出した判断は間違っていなかったと今でも思う。
ただ、何も変えられなかったことを後悔している。
今でも、中途半端に干渉しては無力感を感じている。
私はなぜ変えられないエンジニアだったのか 原因がわからなければ対策もできない。
全員が必ず変えられるエンジニアになる必要はないが、私は変えられるエンジニアになりたい。
そのために変えられなかった原因を考える。
自分では「良い」と思ってるこの「良さ」を共有できていない 改善はなぜ存在するのか。
そこに問題があるからである。
問題からストレスが生まれ、このストレスを消すために改善する。
この「ストレスを消す」ことが良さである。
しかし、ストレスが共有できなかった。
ストレスが共有できなければ、消すもなにもない。
はじめから存在しないのだ。
改善するためには、ストレスを共有しなければならない。
ストレスを共有するためには、より良い状態を提示するしかない。
結果が出ていないのに周りを巻き込んだ より良い状態を提示できないまま、周りに改善を強要した。
ストレスを感じていない状態では、解消するストレスも存在しないので理解してもらえない。
当然の結果である。
人は損得勘定で動く。
私はストレスを消せるなら得すると思って動いた。
存在しないストレスを解消するのは、コストだけかかりメリットがない。
損すると思ったら誰も動かない。
問題の共有ができなかった この1点につきる。
ここをもっと突き詰められていれば、結果はもう少し変わっていたかも知れない。
改善を共有するのではなく、問題を共有すれば、自ずと改善に向かう 自分の中で「悪い」と感じていることが、他人の中では「悪くない」ということは往々にして起こりうる。
その時に大事なことは、自分の悪いを改善するための行動を共有するのではなく、悪いを共有するのである。
悪いが共有できたら、あとは一緒に改善していける。
問題を共有して改善するために、まずは改善結果を出す では問題を共有するためにはどうすればいいのか。
最も説得力があるものは、改善結果を提示することである。
まずは自分が改善する。
そして結果を作る。
結果からどこが悪くて、改善するとどうなるのか示す。
早まってはいけない。
共有するのは結果を出したあとだ。
結果を出したら隣の人から巻き込む まずは隣の人から巻き込もう。
隣の人とも共有できない問題であるならば、全員と共有できるはずがない。
とにかく1番近くの人に話してみよう。
人目をはばかるなら直接ではなくてもいい。
大事なことは問題を理解してもらうことである。
近くの人から幸せにする 考えだした改善策は、実行した人を幸せにするものか？
その幸せを共有したいと思えるか？
幸せを共有したいなら近くの人からだ。
隣の人を幸せにできたなら、次は反対隣の人だ。
次は正面の人。
急いてはいけない。
変えられるエンジニアに意味はあるのか？ 環境を移せばいいだけではないのか？
たしかにそれもある。
だが、誰かを幸せにできるならそこに意味はある。</description>
    </item>
    
    <item>
      <title>DXライブラリできれいなフォントを表示する</title>
      <link>http://blog.5000164.jp/2014-03-dxlib_practice_1/</link>
      <pubDate>Sun, 16 Mar 2014 03:20:28 +0000</pubDate>
      
      <guid>http://blog.5000164.jp/2014-03-dxlib_practice_1/</guid>
      <description>早速見ていただきましょう  ソースコードはこちら。
5000164/dxlib-practice-1
DXライブラリで1番最初に確認したのがフォントの表示 ゲームのようなものを作りたいなと考えていて、知人に教えてもらったDXライブラリを使うことにしました。
ＤＸライブラリ置き場　ＨＯＭＥ
その際に、1番初めに確認したことがフォントの表示でした。
フォントの美しさはモチベーションに直結します。
結果はごらんの通り  美しいフォントを表示させることができました。
ちなみに比較対象として、デフォルト設定でのフォントを下部に表示しています。
フォントをきれいに表示するには1行追加するだけ ChangeFontType(DX_FONTTYPE_ANTIALIASING_8X8);  この文を追加するだけです。
この文を追加することでフォントにアンチエイリアスをかけてくれます。
ＤＸライブラリ置き場　リファレンスページ
よりうつくしい表示のために若干の影をつけています アンチエイリアスをかけるだけで十分きれいに表示されます。
ですが、ここではよりフォントを際立たせるために、若干の影をつけています。
まずは背景に影を描画。
フォントを描画したあとにガウシアンフィルタをかけるのがポイント。
// 影の表示開始位置 text_x = font_size + shadow_offset_x; text_y = font_size + shadow_offset_y; // 影のベースとなる文字列を描画 for (int row = 0; row &amp;lt; 5; row++) { DrawString(text_x, (int)(text_y + ((font_size * line_height) * row)), text[row], shadow_color_dx); } // ガウスフィルターを施して影にする GraphFilter(backscreen, DX_GRAPH_FILTER_GAUSS, 8, 50);  背景ができたら、普通にフォントを描画します。</description>
    </item>
    
    <item>
      <title>WPFで方向キーを入力した方向へ四角形を動かす</title>
      <link>http://blog.5000164.jp/2014-03-wpf_practice_2/</link>
      <pubDate>Thu, 13 Mar 2014 04:21:42 +0000</pubDate>
      
      <guid>http://blog.5000164.jp/2014-03-wpf_practice_2/</guid>
      <description>実際に作ったものはこんな感じです  方向キーの入力した方向へで赤い点が動きます。
ソースコードはこちら。
5000164/wpf-practice-2
画面に動かすものを表示する とりあえずなんでもよかったので、Rectangleタグで四角形を表示します。
そして、位置を指定するためにCanvasタグで囲みます。
&amp;lt;Canvas&amp;gt; &amp;lt;Rectangle Name=&#34;pointer&#34; Width=&#34;10&#34; Height=&#34;10&#34; Fill=&#34;Red&#34; Canvas.Left=&#34;0&#34; Canvas.Top=&#34;0&#34; /&amp;gt; &amp;lt;/Canvas&amp;gt;  これでXAML側はほぼ完成。
あとは動かすだけ。
キーボードの入力を取得します WindowにPreviewKeyDownをつけます。
これでキーが押されたらイベントが発生します。
WPFサンプル:KeyDownイベントとKeybord.Modifiersプロパティ:Gushwell&amp;#8217;s C# Dev Notes
C#側で座標を取得するために まずは四角にNameをつけます。
これでC#側で変数として扱えます。
XAML とプログラムコード（WPF） (.NET Framework)
四角の現在位置を取得する C#側で四角につけた名前から座標を取得します。
// 現在地を取得 Double leftPosition = Canvas.GetLeft(this.pointer); Double topPosition = Canvas.GetTop(this.pointer);  Canvas.GetLeft メソッド (System.Windows.Controls)
入力されたキーの内容を判断する 次は、方向キーが入力された方向へ動くために、入力されたキーを判断します。
// 入力された方向キーの方向へ移動 if (e.Key == Key.Up) // 上 else if (e.Key == Key.Down) // 下 else if (e.</description>
    </item>
    
    <item>
      <title>WPFで枠のないウィンドウを作る</title>
      <link>http://blog.5000164.jp/2014-03-wpf_practice_1/</link>
      <pubDate>Tue, 11 Mar 2014 23:17:38 +0000</pubDate>
      
      <guid>http://blog.5000164.jp/2014-03-wpf_practice_1/</guid>
      <description>実際に作ったものはこんな感じです  ソースコードはこちら。
5000164/wpf-practice-1
実装するにあたって参考にしたサイト こちらの記事を参考にさせていただきました。
WPF で Zune のようなウィンドウを作る | grabacr.nét
この記事に沿っていったらできました。
これを追記するだけ。
&amp;lt;WindowChrome.WindowChrome&amp;gt; &amp;lt;WindowChrome CaptionHeight=&#34;23&#34; ResizeBorderThickness=&#34;100&#34; /&amp;gt; &amp;lt;/WindowChrome.WindowChrome&amp;gt;  枠なしには出来たけどウィンドウの影が気になる ウィンドウの枠がなくなってかっこよくなったのに、影が主張し過ぎで気になります。
この影も消したい。
影を消す方法を調べていたら、先ほどと同じブログのこちらの記事にたどり着きました。
WPF で Visual Studio 2012 のような光るウィンドウを作る | grabacr.nét
なるほど、よくわからん。
WPF初心者の私には無理だと判断したので、この記事の冒頭で紹介されていた簡易版で実装します。
影をいい感じにつける &amp;lt;Window x:Class=&#34;練習1.MainWindow&#34; xmlns=&#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&#34; xmlns:x=&#34;http://schemas.microsoft.com/winfx/2006/xaml&#34; Title=&#34;MainWindow&#34; Width=&#34;700&#34; Height=&#34;700&#34; WindowStyle=&#34;None&#34; AllowsTransparency=&#34;True&#34; WindowStartupLocation=&#34;CenterScreen&#34; Background=&#34;Transparent&#34;&amp;gt; ～中略～ &amp;lt;Border BorderBrush=&#34;#222222&#34; Background=&#34;#222222&#34; BorderThickness=&#34;1&#34; Margin=&#34;100&#34;&amp;gt; &amp;lt;Border.Effect&amp;gt; &amp;lt;DropShadowEffect ShadowDepth=&#34;0&#34; BlurRadius=&#34;100&#34; Color=&#34;#000000&#34; Opacity=&#34;0.7&#34; /&amp;gt; &amp;lt;/Border.Effect&amp;gt; ～中略～ &amp;lt;/Border&amp;gt; &amp;lt;/Window&amp;gt;  WindowにWindowStyle=&amp;ldquo;None&amp;rdquo;、AllowsTransparency=&amp;ldquo;True&amp;rdquo;、Background=&amp;ldquo;Transparent&amp;rdquo;を指定することで、枠を消して透明にしています。
アプリが描画できる範囲がWindowの700&amp;#215;700の内側のみで、その内側にさらに影とウィンドウを描画する、という認識です。
内側のBorderにMarginを設けて、影をつけています。</description>
    </item>
    
    <item>
      <title>4ヶ月無職で過ごした感想</title>
      <link>http://blog.5000164.jp/2014-02-musyoku/</link>
      <pubDate>Fri, 28 Feb 2014 00:14:30 +0000</pubDate>
      
      <guid>http://blog.5000164.jp/2014-02-musyoku/</guid>
      <description>私は無職で約4ヶ月間過ごしました せっかく無職で4ヶ月も過ごしたので、その感想を書いてみたいと思います。
あんまりこういう機会もないことですし。
最初は不安で仕方がなかった 辞めて最初のうちは不安でした。
不安で不安で、早くなんとかしなきゃとずっと思っていました。
そうしたらすごく疲れました。
不安ばっかりなのはよくないです。
なるべく気楽に考えるようにしてたらすごい楽しくなってきた すごい疲れてしまったので、なるべく気楽に考えるようにしました。
大丈夫なんとかなるさ、と。
気楽に気楽に考えていたら、すごい楽しくなってきました。
お金こそあんまり使えないものの時間がたくさんある。
開発したいときに開発したり、麻雀したい時に麻雀したり。
気分が乗ったら好きなだけ好きなことできるのはすごい楽しかった。
物事を楽しく感じる気持ちの余裕を持ち続けることが大事ですね。
そして1番びっくりしたのがたくさん助けがあること 仕事は自分で見つけるしかないと思ってましたけど、そうでもないんですね。
「こういう仕事があるらしいよ」「ここで求人募集してるってよ」
というような連絡を5, 6人以上の方からいただきました。
この友達の少ないおれが。
すごいびっくりしました。
そしてなによりありがたかった。
すごい嬉しかったです。
あとはすごい心配してもらえる みんないい人なんです。
無職だっていうと心配してもらえて相談に乗ってもらえます。
すごくありがたいです。
そして仕事が決まるとすごい喜んでもらえる おめでとうと言われると、自分のことのように嬉しくなります。
自分のことだけど。
喜んでもらえるのが嬉しいですね。
これもほんとにありがたい。
結論：ありがたい ほんとに感謝です。
とても嬉しくなります。
ほんとにありがとうございます。
まとめ：なんとかなる 無職になったときはとても不安だったけど、なんとかなるものだと思いました。
あんまり物事を不安にばかり捉えないで、気楽にいくのも大事です。
その方が人生楽しい。</description>
    </item>
    
    <item>
      <title>プレゼンは想いを伝える手段 - 本の感想（プレゼンテーションzen／ガー・レイノルズ、熊谷小百合訳）</title>
      <link>http://blog.5000164.jp/2014-02-presentationzen/</link>
      <pubDate>Wed, 12 Feb 2014 00:27:55 +0000</pubDate>
      
      <guid>http://blog.5000164.jp/2014-02-presentationzen/</guid>
      <description>プレゼンテーションzen／ガー・レイノルズ、熊谷小百合訳 そのプレゼンはなんのため？ つまらないプレゼンが溢れかえっている。
資料をただ読み上げるだけ？
やらされてやる？
そういった悲劇をなくすためにはどうすればいいのか。
プレゼンとは、伝えたい想いがあり、聞き手を説得するために行う手段の1つである。
プレゼンの見せ方 スライドはドキュメントではない。
主役はスライドではなく発表者である。
スライドは引き立て役。
発表者を引き立てるためにはどんなスライドがいいのか。
デザインの知識がなくてもわかりやすいように書いてある。
プレゼンについての全般的なことをわかりやすく教えてくれる なんのためにプレゼンをするのか。
その準備から発表の心構えまで。
想いを伝える方法や資料をデザインする方法まで簡潔にまとめられていてわかりやすい。
プレゼンの資料がたくさん載ってるのも参考になっていい。
プレゼンがうまくなるためには、いいプレゼンを知っていること、伝えたい想いを持つこと、そして練習が大事ですね。</description>
    </item>
    
    <item>
      <title>使いやすさとはなにか - 本の感想（誰のためのデザイン？／D.A.ノーマン、野島久雄訳）</title>
      <link>http://blog.5000164.jp/2014-02-the_design_of_everyday_things/</link>
      <pubDate>Tue, 11 Feb 2014 23:47:53 +0000</pubDate>
      
      <guid>http://blog.5000164.jp/2014-02-the_design_of_everyday_things/</guid>
      <description> 誰のためのデザイン？／D.A.ノーマン、野島久雄訳 非常にわかりやすかった 具体的な例が多く出てきて非常にわかりやすかった。
使いやすいデザインとはなにか。
どのようなデザインが使いにくいのか。
どのようにデザインすれば使いやすくなるのか。
読むのに半年くらいかかった 読み始めるのにそれほど抵抗はないのだけれど、読み進めるのが遅かった。
事前に読みやすい読みやすいという評判を聞いていたせいで、私が誤ったメンタルモデルを構築してしまったのかも知れない。
ユーザーよりも開発者を優先したことがある なにかを作る時に、「作るのが簡単だから」という理由で決定したことがある。
もちろん開発工数を抑えることは大事だけれど、それで安物買いの銭失いになってしまっては本末転倒である。
デザインをもっと考えるべきであった。
わかりやすさよりも見た目の簡単さを優先したことがある 具体例としても出てきたボタンの配置について、なんとなくすべてを同じ形にしてしまったことがある。
持っている機能が違うのに同じ見た目ではわかりづらい。
1つだけ色がついていたらかっこ悪い、1つだけ形が違っていたらダサい、という「なんとなく」で決定してしまった。
ボタンにも同じ形なら同じ形であることの意味を考えるべきである。
もっと使いやすさについて学んでいきたい 読むのに時間はかかったが非常にためになる本だった。
私がこの本で特に気に入ったのはこの一文。
 さて、これからはあなたの番である。もしもあなたがデザイナーならば、使いやすさを目指す戦いに加わってほしい。
「誰のためのデザイン？」P.358より  使いやすさというものについてもっと学んでいきたい。
使いやすさを目指す戦いに加わらなければならない。
もし、使いやすさに興味があるのなら一読をおすすめします。
最後に、この本からのメッセージを。
 そして、あなた自身にも楽しんでもらいたい。デザインの細かなところまで確かめながら世界中を歩きまわって欲しい。役に立つようなものがあれば、小さなものでもうれしく思ってほしい。そのようなものを慎重に考えて組み入れた人を好意的に考えてあげてほしい。そして、そのような細かいことが重要なのであり、そんな小さなことのためにも、デザイナーは役立つものを組み入れるべく力を尽くさなければならなかったにちがいないということをわかってほしい。よいデザインをもたらしてくれた人には、心の中で賞を贈ろう。花も贈ろう。よいデザインをしてくれなかった人には、きびしい批判をしよう。その人には雑草で十分である。
「誰のためのデザイン？」P.358-359より  </description>
    </item>
    
    <item>
      <title>HTC J One HTL22では絵文字が表示されないので簡単な対処法を見つけた</title>
      <link>http://blog.5000164.jp/2014-01-emoji/</link>
      <pubDate>Mon, 27 Jan 2014 01:29:02 +0000</pubDate>
      
      <guid>http://blog.5000164.jp/2014-01-emoji/</guid>
      <description>HTC J Oneって絵文字が表示されないんですね HTC J Oneを使い始めて半年ほどですが、最近になって絵文字が表示されないということに気づきました。
というわけで表示するためにはどうすればいいのか調べました。
HTC J Oneには絵文字のフォントが入っていないから絵文字は表示できない 結論から言うと表示できません。
rootをとって絵文字のフォントを入れれば表示することもできるらしいですが、リターンに対してリスクが大きすぎます。
半年間気付かなかったくらい使っていませんし。
そこで簡単にできる臨時的な対処法 表示されない絵文字を完全に確認することはできないですが、一部の絵文字なら簡単に確認できる方法を見つけました。
例えばLINEで絵文字が送られてきた場合 絵文字をコピーします。
 Eメールアプリを起動して絵文字を貼り付けます。
 絵文字が表示されます。
 どうやらEメールアプリはアプリ側で解釈してくれているらしい Eメールアプリでは絵文字フォントが入っていなくても絵文字になるように解釈してくれるらしいです。
いくつかの絵文字を見てみましたが、表示されない絵文字もありました。
でもEメールアプリで選択できる絵文字は表示されるのかなと思います。
まとめ 絵文字という文化は今後廃れていって欲しいです。</description>
    </item>
    
    <item>
      <title>hoverした要素に好きなようにハイライトをかける</title>
      <link>http://blog.5000164.jp/2014-01-hover/</link>
      <pubDate>Wed, 22 Jan 2014 17:10:00 +0000</pubDate>
      
      <guid>http://blog.5000164.jp/2014-01-hover/</guid>
      <description>  リンクとかをホバーしたら背景色を変えたりしますよね リンクをホバーしたら文字色と背景色が変わるという実装はよくあります。
このコンテンツはクリッカブルですよ、と知らせるためですね。
でもリンクの中に画像が含まれている時は画像だけ変わらなかったりします。
これはちょっと違和感です。
そこですべてに覆いかぶさっているように見せます。
まずはデモをどうぞ See the Pen hoverした要素の上に色をかぶせる by SUGAWARA Hiroshi (@5000164) on CodePen.   1&amp;lt;h1&amp;gt; 2実装の解説です 3&amp;lt;/h1&amp;gt; 45&amp;lt;p&amp;gt; 6非常に簡単です。&amp;lt;br /&amp;gt; 今までhoverの擬似クラスにしていた部分をhoverの擬似クラスのafter擬似要素にします。&amp;lt;br /&amp;gt; 文章だとちょっとわかりづらいのでコードで書くと、 7&amp;lt;/p&amp;gt; 89&amp;lt;pre class=&amp;#34;brush: css; title: ; notranslate&amp;#34; title=&amp;#34;&amp;#34;&amp;gt;  a:hover { ・・・ } 
1&amp;lt;p&amp;gt; 2これを 3&amp;lt;/p&amp;gt; 45&amp;lt;pre class=&amp;#34;brush: css; title: ; notranslate&amp;#34; title=&amp;#34;&amp;#34;&amp;gt;  a:hover::after { ・・・ } 
1&amp;lt;p&amp;gt; 2こうします。&amp;lt;br /&amp;gt; あとはちょっと装飾してやれば簡単に実現できます。 3&amp;lt;/p&amp;gt; 45&amp;lt;h1&amp;gt; 6まとめ 7&amp;lt;/h1&amp;gt; 89&amp;lt;p&amp;gt; 10hoverした時に画像にハイライトがついていないのが個人的にすごく気になっていたので、簡単に実装できてよかったです。&amp;lt;br /&amp;gt; ちょっと応用すれば他のこともできそうですね。 11&amp;lt;/p&amp;gt; </description>
    </item>
    
    <item>
      <title>自分を紹介するポートフォリオサイトを作った</title>
      <link>http://blog.5000164.jp/2014-01-portfolio/</link>
      <pubDate>Tue, 21 Jan 2014 13:15:09 +0000</pubDate>
      
      <guid>http://blog.5000164.jp/2014-01-portfolio/</guid>
      <description>就職のためにポートフォリオサイトを作りました Webデザイナーになりたいなら就職活動をするにあたってポートフォリオサイトは必須という情報を得ましたので作りました。
ポートフォリオサイトはこちらです。
正直よくわかりませんでした とりあえず作ったは作ったんですが、内容をどうすればいいのかさっぱりわかりませんでした。
それは私に実績がないからですね。
実績を紹介して自分のスキルを証明するためにポートフォリオサイトを作ると思うのですが、実績がないとなにを書けばいいのかわかりません。
だから「すごいぽーとふぉりおさいと」を作ればアピールできるのかなと考えていました。
「すごいぽーとふぉりおさいと」は簡単にはできない 簡単にはできないことばっかりやろうとしてると全然前に進めません。
ポートフォリオサイトを作るためにかなり時間をかけましたが、全然完成の目処が立ちませんでした。
そこでポートフォリオサイトに時間をかけるならできることからやろうと思い、とりあえず完成にして別の就職活動をすることにしました。
実績ができたらどんどんポートフォリオサイトに追加していき、充実させる。
就職できなかったら改善する このポートフォリオサイトが原因で就職できない、という事態に陥ったら改善したいと思います。
まずはできることからやろう。
デザインのポイントはフォントの使い方 デザインの話をしますと、今回はフォントに気を使いました。
実績がないから文章が主役になるわけですが、その文章を映えるものにするためです。
今回は初めて本文に日本語のWebフォントを適用してみました。
日本語のWebフォントは読み込みに時間がかかるため、今まではワンポイントでしか使ったことがありませんでした。
本文に日本語Webフォントは全然いける 思ったよりも時間がかかりません。
このくらいなら私としては許容範囲です。
本文にもWebフォントが使えるとわかったのは収穫です。
やっぱり本文のフォントが1番サイトの雰囲気を左右しますからね。
でも作ったばっかりなのにTypeSquareの￥0キャンペーンが終わっちゃうからデザイン直さなきゃいけないんですよね。
まとめ とりあえず作る、公開する、だめなら直す、のスタイルの方がどんどん先に進めていいですね。</description>
    </item>
    
    <item>
      <title>映像が丁寧で光の表現が美しい – 映画の感想（秒速5センチメートル）</title>
      <link>http://blog.5000164.jp/2014-01-5cm_per_sec/</link>
      <pubDate>Sun, 05 Jan 2014 03:33:09 +0000</pubDate>
      
      <guid>http://blog.5000164.jp/2014-01-5cm_per_sec/</guid>
      <description>秒速5センチメートル ※ネタバレ注意
秒速5センチメートルを見ました Appleの12 DAYS プレゼントでレンタルが無料だったので見ました。
どこかで聞いたことがあるタイトルなのできっと有名なのだと思います。
とりあえずざっくりとした感想を 映像がきれい 映像がすごいきれいですね。
特に光の描写がきれいだと思いました。
現実とは異なる描写が多いように感じたので、そこがアニメの表現の良さなのかなと思います。
遠野くんかっこいい 遠野くんはかっこいいですね。
花苗ちゃんがかわいかったです。
花苗ちゃんの声優がいいなと思いました。
他の人の声はちょっと浮いてる感じがしたけど、花苗ちゃんの声は花苗ちゃんがしゃべってるように感じました。
その他もろもろ 遠野くんが見た夢の中で出てきた銀河ってMacの壁紙の銀河と同じですかね？（調べたらアンドロメダ銀河だった）
それがちょっと「おっ？」ってなった。
あとは遠野くんのパソコンがiMacっぽかったですね。
画面はWindowsっぽかったですけど。
遠野くんはプログラマにでもなったんですかね。
iPadで見るのも悪くない 今回はiPadで見たんですけど、けっこー悪くないですね。
画面きれいだし、ヘッドフォンをすれば音も大丈夫です。
ただ画面が暗転した時とか、暗いシーンとかで自分の顔がうつるのがちょっと嫌ですね。
黒が黒として表現されないってのはちょっと困ります。
部屋を真っ暗にして見ればいいんですかね。
ちょっとした考察 光の表現がきれいなのは儚さの表現 映像は全体としてとてもきれいでしたが、私は特に光の表現が目につきました。
これは儚さや思い出、過去の美化といった脳内のイメージを意識してのことなのでしょうか。
最後の笑顔は次への一歩 女性と踏切ですれ違った後に、笑顔で歩き出すラストシーンがありますが、これは失恋できたという表現だと思います。
まずすれ違った女性、これは明里ではなく知らない女性で、明里だと期待する遠野の願望だと思います。
その後にお互い立ち止まった後のやけに長い電車の通過。
あの電車のスピードはそれなりに速かった気がするのですが、通り過ぎるまでに時間がかかりすぎている気がします。
遠野の精神的な感覚を強調している？
振り返って電車が過ぎるのを待っていたのに、そこに女性の姿はなかった。
そして笑って歩き出す。
ああ、これでやっと失恋できた。
と、そんなことを思ったのではないかという印象を受けました。
相手も踏切の向こうで一度立ち止まったのに、遠くに歩いて行く後ろ姿が見えるのではなく、姿が見えないという表現が明里という願望との決別だと思います。
それにしても後ろ姿も見えずに姿がないってのは、すぐに他の道にでも曲がったんですかね。
まとめ 小説版もあるらしいので、物語をちゃんと知るには小説版を読まないとわからないかもですね。
正直よくわからない話でした。
郷愁とかそういった感じですかね。
失恋した直後とかに見たら、なにか思うところがあったのかも知れません。</description>
    </item>
    
    <item>
      <title>2013年を振り返る</title>
      <link>http://blog.5000164.jp/2014-01-2013/</link>
      <pubDate>Wed, 01 Jan 2014 19:53:50 +0000</pubDate>
      
      <guid>http://blog.5000164.jp/2014-01-2013/</guid>
      <description>TwitterとかFacebookとか自分のブログを見て2013年を振り返った 2013年が終わったので1年の振り返りをしたいと思います。
こういう時にログがちゃんと残ってて振り返れるのはいいですね。
たくさんのボカロ曲を聴いていい曲とたくさん出会えた 2013年もたくさんボカロ曲を聴きました。
Twitterを見てても気に入った曲のツイートがすごい多かったです。
2014年もたくさん聴くと思います。
自分の好みもどんどん変わっていったりしているので、どういう曲を聴くようになるのか楽しみです。
Webのことをいろいろ勉強した Webの勉強は常に欠かさないようにしていました。
どう考えても去年より力がついてます。
常に成長できるようにこれからもがんばっていきます。
小説をそこそこ読んだ 今までは小説は読んで終わりだったのですが、今年から小説の感想をブログに書くようにしました。
感想を書くというアウトプットが面白かったのでこれは今後も続けていきます。
読んでみたい本がたまっていく一方なので、2014年はもう少し読めるといいなと思います。
フットサルとか野球とかやった フットサルと野球をやってて思うのですが、だんだん下手になってる気がします。
ただでさえ下手なのにこれは致命的です。
今はどこかのタイミングでジムに通い始めようと画策中です。
ブログを47本書いた 2013年はブログを47本書きました。
うん、思ったよりもけっこー書いてた。
これも書いていて明らかに文章力が上がったと実感できているので、これからも続けます。
でもまあなによりも楽しいから続けるんですけどね。
約3年間使ってた携帯を変えた 前使ってた携帯は処理も遅いし電池も保たないしで、すごいがんばってカスタマイズしてたものですが、新しい携帯は特に何もしなくても処理は速いし電池も保つしで、技術の進歩って素晴らしいです。
もっと進歩するのが楽しみです。
でもまあ1番印象に残ってるのは会社を辞めたことでしょう この記事でも書きましたけど、約3年間働いていた会社を辞めました。
つくづく思うのは、生きていくには金が必要なんだなーということです。
まとめ 2013年もいろいろありましたが、2014年もいろいろあるでしょう。
あんまり肩肘張らずに楽しく生きていけたらなと思います。</description>
    </item>
    
    <item>
      <title>リストバンド型のライフログガジェットを調べたのでまとめた</title>
      <link>http://blog.5000164.jp/2014-01-lifelog/</link>
      <pubDate>Wed, 01 Jan 2014 17:44:17 +0000</pubDate>
      
      <guid>http://blog.5000164.jp/2014-01-lifelog/</guid>
      <description>きっかけ なんかうまく睡眠をとれている気がしません。
ということで睡眠のログをとろうと思ってライフログガジェットを調べました。
リストバンド型が楽そうだなと思ったので、リストバンド型だけ調べてます。
Jawbone UP いきなりですが、これを買いました。
慣れてきたら使用感をレビューしたいと思います。
メモ 同期する際にスマートフォンに接続する必要がある。
Androidだと対応していない端末もある。
Bluetoothで接続できるUP24が発売されたが、日本では未発売。
UP24が日本で発売されるまで様子を見るか、UPを買うか。
参考 Jawbone UPを1ヵ月使ってわかったこと | absorbed in&amp;#8230;
Bluetooth対応！　Jawbone、新型ライフログリストバンド「UP24」を発表 : ギズモード・ジャパン
Jawbone UP24 : Jawboneから次のUPが発表！今度はBluetooth機能が追加！ | favLife with iPhone
Nike+ FuelBand SE メモ 運動×ソーシャルというイメージ。
睡眠のトラッキングやライフログという側面とは少し違うかも。
参考 付けただけでアクティブな気分！毎日のあらゆる活動を記録する「Nike+ FuelBand SE」が日本上陸！ : ギズモード・ジャパン
Fitbit Force, Fitbit Flex メモ 日本純正だとSoftBank HealthCareの契約が必要なのが致命的。
スマートフォンの着信を振動で知らせてくれるのは便利そう。
参考 Fitbit Forceハンズオン：今度は期待通りかも！ : ギズモード・ジャパン
米ギズFitbit Flex 使用レビュー、これは微妙かもしれない&amp;#8230; : ギズモード・ジャパン
Fitbit Flexを約二ヶ月間使ってみて | deform
BASIS メモ 心拍数とかカロリーとか計測できるデータが多い。</description>
    </item>
    
    <item>
      <title>2013年出会えてよかったVOCALOID曲5選</title>
      <link>http://blog.5000164.jp/2014-01-vocaloid_2013/</link>
      <pubDate>Wed, 01 Jan 2014 15:44:14 +0000</pubDate>
      
      <guid>http://blog.5000164.jp/2014-01-vocaloid_2013/</guid>
      <description>イントロ 2013年が終わり、2014年になりました。
2013年もたくさんのVOCALOID曲が生まれました。
私が聴いた曲はその中のほんとにごく一部ですが、その中でも出会えてよかったという曲を紹介します。
そんなわけで2013年出会えてよかったVOCALOID曲5選です。
キアゲハ・プリケノート &amp;#8211; 初音ミク &amp;#8211; あえる [nicodo display=&amp;#8221;player&amp;#8221; width=&amp;#8221;640&amp;#8243; height=&amp;#8221;360&amp;#8243;]sm20271398[/nicodo]  あえるさんのキアゲハ・プリケノート。
音がすごい気持よくてすぐにはまりました。
ミクの声も素敵です。
きれいな音がたくさん詰まってて、でもそれでもうるさくなくて、ゆったりのびのび聴いてて楽しいです。
あえるさんの曲はみんな素敵な音です。
Mermaid &amp;#8211; MC : MIKU RIN GUMI LUKA &amp;#038; DJ : LEN &amp;#8211; Torero [nicodo display=&amp;#8221;player&amp;#8221; width=&amp;#8221;640&amp;#8243; height=&amp;#8221;360&amp;#8243;]sm20624241[/nicodo]  ToreroさんのMermaid。
Toreroさんを知ったのはLeviathanでした。
それから追いかけてますけど、どの曲もすごいかっこいいです。
絵もかわいくて好きです。
Toreroさんの曲の中でもMermaidが今のところ1番の好みなのでMermaidを紹介させていただきます。
死なない魔法 &amp;#8211; GUMI &amp;#8211; みやけ [nicodo display=&amp;#8221;player&amp;#8221; width=&amp;#8221;640&amp;#8243; height=&amp;#8221;360&amp;#8243;]sm21673452[/nicodo]  みやけさんの死なない魔法。
前回のおれおれVOCALOIDランキングでも紹介させていただきました。
おしゃれでかっこよくて気持ちいいです。
宇宙遊泳 &amp;#8211; 初音ミク &amp;#8211; 青屋夏生 [nicodo display=&amp;#8221;player&amp;#8221; width=&amp;#8221;640&amp;#8243; height=&amp;#8221;360&amp;#8243;]sm22408044[/nicodo]  青屋夏生さんの宇宙遊泳。</description>
    </item>
    
  </channel>
</rss>